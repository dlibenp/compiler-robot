/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package memo;

import MemoCompiler.AbstractSyntaxTrees.AST;
import MemoCompiler.AbstractSyntaxTrees.ASTProgram;
import MemoCompiler.Errors.CompilerError;
import MemoCompiler.InOut;
import MemoCompiler.JTextMemoConsole;
import MemoCompiler.MemoCompiler;
import MemoCompiler.Runtime.RuntimeEntity;
import MemoCompiler.Stream.StringSourceStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;


/**
 *
 * @author gago
 */
public class MemoView extends javax.swing.JFrame {

    /**
     * Creates new form MemoViewNew
     */
    public MemoView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneMainLayout = new javax.swing.JSplitPane();
        jPanelEditors = new javax.swing.JPanel();
        jTabbedPaneEditors = new javax.swing.JTabbedPane();
        jScrollPaneSource = new javax.swing.JScrollPane();
        jTextAreaSource = new javax.swing.JTextArea();
        jScrollPaneAST = new javax.swing.JScrollPane();
        jTreeAST = new javax.swing.JTree();
        jScrollPaneGeneratedCode = new javax.swing.JScrollPane();
        jTextAreaGeneratedCode = new javax.swing.JTextArea();
        jPanelOutput = new javax.swing.JPanel();
        jLabelOutput = new javax.swing.JLabel();
        jScrollPaneOutput = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jMenuBarMain = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuBuild = new javax.swing.JMenu();
        jMenuItemScanAll = new javax.swing.JMenuItem();
        jMenuItemParse = new javax.swing.JMenuItem();
        jMenuItemRun = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPaneMainLayout.setDividerLocation(208);
        jSplitPaneMainLayout.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPaneSource.setPreferredSize(new java.awt.Dimension(126, 200));

        jTextAreaSource.setColumns(20);
        jTextAreaSource.setRows(5);
        jTextAreaSource.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTextAreaSourceAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPaneSource.setViewportView(jTextAreaSource);

        jTabbedPaneEditors.addTab("Source code", jScrollPaneSource);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTreeAST.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPaneAST.setViewportView(jTreeAST);

        jTabbedPaneEditors.addTab("AST", jScrollPaneAST);

        jTextAreaGeneratedCode.setEditable(false);
        jTextAreaGeneratedCode.setColumns(20);
        jTextAreaGeneratedCode.setRows(5);
        jScrollPaneGeneratedCode.setViewportView(jTextAreaGeneratedCode);

        jTabbedPaneEditors.addTab("Generated code", jScrollPaneGeneratedCode);

        javax.swing.GroupLayout jPanelEditorsLayout = new javax.swing.GroupLayout(jPanelEditors);
        jPanelEditors.setLayout(jPanelEditorsLayout);
        jPanelEditorsLayout.setHorizontalGroup(
            jPanelEditorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneEditors, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );
        jPanelEditorsLayout.setVerticalGroup(
            jPanelEditorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneEditors, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
        );

        jTabbedPaneEditors.getAccessibleContext().setAccessibleName("Source code");

        jSplitPaneMainLayout.setLeftComponent(jPanelEditors);

        jLabelOutput.setText("Compiler output:");

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPaneOutput.setViewportView(jTextAreaOutput);

        javax.swing.GroupLayout jPanelOutputLayout = new javax.swing.GroupLayout(jPanelOutput);
        jPanelOutput.setLayout(jPanelOutputLayout);
        jPanelOutputLayout.setHorizontalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addComponent(jLabelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelOutputLayout.setVerticalGroup(
            jPanelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOutputLayout.createSequentialGroup()
                .addComponent(jLabelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneOutput))
        );

        jSplitPaneMainLayout.setBottomComponent(jPanelOutput);
        jPanelOutput.getAccessibleContext().setAccessibleName("");

        jMenuFile.setText("File");

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItem1);

        jMenuItem2.setText("Salvar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItem2);

        jMenuBarMain.add(jMenuFile);

        jMenuBuild.setText("Build");

        jMenuItemScanAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memo/resources/scan.png"))); // NOI18N
        jMenuItemScanAll.setText("Scan All");
        jMenuItemScanAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemScanAllActionPerformed(evt);
            }
        });
        jMenuBuild.add(jMenuItemScanAll);

        jMenuItemParse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memo/resources/compile.PNG"))); // NOI18N
        jMenuItemParse.setText("Parse");
        jMenuItemParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemParseActionPerformed(evt);
            }
        });
        jMenuBuild.add(jMenuItemParse);

        jMenuItemRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memo/resources/run.png"))); // NOI18N
        jMenuItemRun.setText("Run");
        jMenuItemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRunActionPerformed(evt);
            }
        });
        jMenuBuild.add(jMenuItemRun);

        jMenuBarMain.add(jMenuBuild);

        setJMenuBar(jMenuBarMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPaneMainLayout)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPaneMainLayout)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemScanAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemScanAllActionPerformed
        try {
            MemoCompiler compiler = new MemoCompiler(new StringSourceStream(jTextAreaSource.getText()));
            LinkedList tokenList = compiler.scanAll();
            jTextAreaOutput.setText(null);
            if (!compiler.ErrorReporter().isEmpty()) {
                for (CompilerError error : compiler.ErrorReporter()) {
                    jTextAreaOutput.append(error.toString());
                }
            } else {
                for (int i = 0; i < tokenList.size(); i++) {
                    jTextAreaOutput.append(tokenList.get(i).toString() + "\n");
                }
            }
        } catch (IOException ex) {
            jTextAreaOutput.setText("Exception occurred when scanning tokens: " + ex.getMessage());
            Logger.getLogger(MemoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemScanAllActionPerformed

    private void jMenuItemParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemParseActionPerformed
        try {
            MemoCompiler compiler = new MemoCompiler(new StringSourceStream(jTextAreaSource.getText()));
            jTextAreaOutput.setText(null);
            jTreeAST.setModel(null);
            jTextAreaGeneratedCode.setText(null);

            InOut.SetConsole(new JTextMemoConsole(jTextAreaOutput));
            compiler.Compile();
            if (!compiler.ErrorReporter().isEmpty()) {
                for (CompilerError error : compiler.ErrorReporter()) {
                    jTextAreaOutput.append(error.toString());
                }
            } else {
                AST ast = compiler.getTree();
                jTextAreaOutput.append("Compilación OK...");

                // Build the AST
                BuildTree buildTree = new BuildTree();
                DefaultMutableTreeNode nodoProgram = (DefaultMutableTreeNode) buildTree.visit((ASTProgram) ast);

                DefaultTreeModel nodoraiz = new DefaultTreeModel(null);
                nodoraiz.setRoot(nodoProgram);
                jTreeAST.setModel(nodoraiz);

                // Display generated code
                jTextAreaGeneratedCode.setText("");
                for (RuntimeEntity entity : compiler.getCode()) {
                    jTextAreaGeneratedCode.append(entity.toString() + "\n");
                }
            }
        } catch (Exception ex) {
            jTextAreaOutput.setText("Exception occurred when parsing the code: " + ex.getMessage());
            Logger.getLogger(MemoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemParseActionPerformed

    private void jMenuItemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRunActionPerformed
        try {
            MemoCompiler compiler = new MemoCompiler(new StringSourceStream(jTextAreaSource.getText()));
            jTextAreaOutput.setText(null);
            jTreeAST.setModel(null);
            jTextAreaGeneratedCode.setText(null);

            InOut.SetConsole(new JTextMemoConsole(jTextAreaOutput));
            compiler.Compile();
            if (!compiler.ErrorReporter().isEmpty()) {
                for (CompilerError error : compiler.ErrorReporter()) {
                    jTextAreaOutput.append(error.toString());
                }
            } else {
                AST ast = compiler.getTree();

                // Build the AST
                BuildTree buildTree = new BuildTree();
                DefaultMutableTreeNode nodoProgram = (DefaultMutableTreeNode) buildTree.visit((ASTProgram) ast);

                DefaultTreeModel nodoraiz = new DefaultTreeModel(null);
                nodoraiz.setRoot(nodoProgram);
                jTreeAST.setModel(nodoraiz);

                // Display generated code
                jTextAreaGeneratedCode.setText("");
                for (RuntimeEntity entity : compiler.getCode()) {
                    jTextAreaGeneratedCode.append(entity.toString() + "\n");
                }
                
                compiler.run();
            }
        } catch (Exception ex) {
            jTextAreaOutput.setText("Exception occurred when parsing the code: " + ex.getMessage());
            Logger.getLogger(MemoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemRunActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("solo archivos .txt","txt");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
             File file = fileChooser.getSelectedFile();
        try {
           
            jTextAreaSource.read( new FileReader( file.getAbsolutePath() ), null );
            } catch (IOException ex) {
              JOptionPane.showMessageDialog(this, "El código no pudo cargarse desde el fichero!",  
                        "Error!", JOptionPane.ERROR_MESSAGE); 
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showSaveDialog(this);
        FileWriter writer;
        if(returnVal == JFileChooser.APPROVE_OPTION){
             File file = fileChooser.getSelectedFile();
        try {
            writer = new FileWriter(file.getAbsolutePath()+".txt");
            writer.write(jTextAreaSource.getText());
            writer.close();
            JOptionPane.showMessageDialog(this, "El código fue salvado exitosamente al fichero!",  
                        "Error!", JOptionPane.INFORMATION_MESSAGE); 
            } catch (IOException ex) {
              JOptionPane.showMessageDialog(this, "El código no pudo cargarse desde el fichero!",  
                        "Error!", JOptionPane.ERROR_MESSAGE); 
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTextAreaSourceAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTextAreaSourceAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextAreaSourceAncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JMenuBar jMenuBarMain;
    private javax.swing.JMenu jMenuBuild;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemParse;
    private javax.swing.JMenuItem jMenuItemRun;
    private javax.swing.JMenuItem jMenuItemScanAll;
    private javax.swing.JPanel jPanelEditors;
    private javax.swing.JPanel jPanelOutput;
    private javax.swing.JScrollPane jScrollPaneAST;
    private javax.swing.JScrollPane jScrollPaneGeneratedCode;
    private javax.swing.JScrollPane jScrollPaneOutput;
    private javax.swing.JScrollPane jScrollPaneSource;
    private javax.swing.JSplitPane jSplitPaneMainLayout;
    private javax.swing.JTabbedPane jTabbedPaneEditors;
    private javax.swing.JTextArea jTextAreaGeneratedCode;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextArea jTextAreaSource;
    private javax.swing.JTree jTreeAST;
    // End of variables declaration//GEN-END:variables
}
